scripts = list(
location = scripts_path,
UMI_script = UMI_script,
SNP_script = SNP_script,
s2 = s2_script
),
output = list(
result = s2_fo,
output_yaml = output_yaml
),
diagnostics = list(
DEBUG = DEBUG,
use_existing_sorted_SAM = use_existing_sorted_SAM,
leave_SAM = leave_SAM,
TryRevComp = TryRevComp
),
alignment = list(
fastq_dir = fastq_dir,
R1 = R1,
R2 = R2,
reference = reference,
SAM_name_base = paste0(run, "_", reference),
SAM_location = paste0(project_dir, SAM_location)
),
genes = genes_l,
samples_barcodes: samples_barcodes_l,
step2 = list(
minimal_MAPQ = minimal_MAPQ,
insert_len_min = insert_len_min,
insert_len_max = insert_len_max,
amplicon_size_tolerance = amplicon_size_tolerance,
UMInoSNPpattern = UMInoSNPpattern,
SNPnoUMIpattern = SNPnoUMIpattern,
T2_small = T2_small,
MINflankLength = MINflankLength
)
)
}
write_config_yaml(s2_fo, yaml_fo, plates.bc.cst.cq)
s2_fo <- file.path(project_dir, s2_result_path, s2_result)
yaml_fo <- file.path(config_dir, paste0(run, ".yaml"))
write_config_yaml(s2_fo, yaml_fo, plates.bc.cst.cq)
write_config_yaml <- function(s2_fo, yaml_fo, plates) {
source("R/parameters.R", local=TRUE)
# data preparation
samples_barcodes_l <- list()
for (plate_i in seq_along(plates)) {
day <- get_info_from_platename(names(plates)[plate_i], "day")
construct_temp <- traverse_outof_plate_wells(plates[[plate_i]], "construct")
construct.day_temp <- paste0(construct_temp, "_", day)
barcode_temp <- traverse_outof_plate_wells(plates[[plate_i]], "barcode")
temp_list <- as.list(setNames(barcode_temp, construct.day_temp))
samples_barcodes_l <- c(samples_barcodes_l, temp_list)
}
# Sasha's YAML format
yaml_list <- list(
version = version,
experiment = list(
UMI = UMI,
SNP = SNP
),
scripts = list(
location = scripts_path,
UMI_script = UMI_script,
SNP_script = SNP_script,
s2 = s2_script
),
output = list(
result = s2_fo,
output_yaml = output_yaml
),
diagnostics = list(
DEBUG = DEBUG,
use_existing_sorted_SAM = use_existing_sorted_SAM,
leave_SAM = leave_SAM,
TryRevComp = TryRevComp
),
alignment = list(
fastq_dir = fastq_dir,
R1 = R1,
R2 = R2,
reference = reference,
SAM_name_base = paste0(run, "_", reference),
SAM_location = paste0(project_dir, SAM_location)
),
genes = genes_l,
samples_barcodes = samples_barcodes_l,
step2 = list(
minimal_MAPQ = minimal_MAPQ,
insert_len_min = insert_len_min,
insert_len_max = insert_len_max,
amplicon_size_tolerance = amplicon_size_tolerance,
UMInoSNPpattern = UMInoSNPpattern,
SNPnoUMIpattern = SNPnoUMIpattern,
T2_small = T2_small,
MINflankLength = MINflankLength
)
)
}
write_config_yaml(s2_fo, yaml_fo, plates.bc.cst.cq)
yaml_fo
write_config_yaml <- function(s2_fo, yaml_fo, plates) {
source("R/parameters.R", local=TRUE)
# data preparation
samples_barcodes_l <- list()
for (plate_i in seq_along(plates)) {
day <- get_info_from_platename(names(plates)[plate_i], "day")
construct_temp <- traverse_outof_plate_wells(plates[[plate_i]], "construct")
construct.day_temp <- paste0(construct_temp, "_", day)
barcode_temp <- traverse_outof_plate_wells(plates[[plate_i]], "barcode")
temp_list <- as.list(setNames(barcode_temp, construct.day_temp))
samples_barcodes_l <- c(samples_barcodes_l, temp_list)
}
# Sasha's YAML format
yaml_list <- list(
version = version,
experiment = list(
UMI = UMI,
SNP = SNP
),
scripts = list(
location = scripts_path,
UMI_script = UMI_script,
SNP_script = SNP_script,
s2 = s2_script
),
output = list(
result = s2_fo,
output_yaml = output_yaml
),
diagnostics = list(
DEBUG = DEBUG,
use_existing_sorted_SAM = use_existing_sorted_SAM,
leave_SAM = leave_SAM,
TryRevComp = TryRevComp
),
alignment = list(
fastq_dir = fastq_dir,
R1 = R1,
R2 = R2,
reference = reference,
SAM_name_base = paste0(run, "_", reference),
SAM_location = paste0(project_dir, SAM_location)
),
genes = genes_l,
samples_barcodes = samples_barcodes_l,
step2 = list(
minimal_MAPQ = minimal_MAPQ,
insert_len_min = insert_len_min,
insert_len_max = insert_len_max,
amplicon_size_tolerance = amplicon_size_tolerance,
UMInoSNPpattern = UMInoSNPpattern,
SNPnoUMIpattern = SNPnoUMIpattern,
T2_small = T2_small,
MINflankLength = MINflankLength
)
)
# Write yaml file
list.save(yaml_list, yaml_fo)
}
{
s2_fo <- file.path(project_dir, s2_result_path, s2_result)
yaml_fo <- file.path(config_dir, paste0(run, ".yaml"))
write_config_yaml(s2_fo, yaml_fo, plates.bc.cst.cq)
}
write_config_yaml <- function(plates) {
source("R/parameters.R", local=TRUE)
# Data Preparation
## Prepare list of {construct_id: barcode}
samples_barcodes_l <- list()
for (plate_i in seq_along(plates)) {
day <- get_info_from_platename(names(plates)[plate_i], "day")
construct_temp <- traverse_outof_plate_wells(plates[[plate_i]], "construct")
construct.day_temp <- paste0(construct_temp, "_", day)
barcode_temp <- traverse_outof_plate_wells(plates[[plate_i]], "barcode")
temp_list <- as.list(setNames(barcode_temp, construct.day_temp))
samples_barcodes_l <- c(samples_barcodes_l, temp_list)
}
## Prepare file directory paths
s2_fo <- file.path(project_dir, s2_result_path, s2_result)
yaml_fo <- file.path(config_dir, paste0(run, ".yaml"))
scripts_dir_path <- file.path(project_dir, scripts_path)
fastq_dir_path <- file.path(project_dir, fastq_dir)
SAM_dir_path <- file.path(project_dir, SAM_location)
# Sasha's YAML format
yaml_list <- list(
version = version,
experiment = list(
UMI = UMI,
SNP = SNP
),
scripts = list(
location = scripts_dir_path,
UMI_script = UMI_script,
SNP_script = SNP_script,
s2 = s2_script
),
output = list(
result = s2_fo,
output_yaml = output_yaml
),
diagnostics = list(
DEBUG = DEBUG,
use_existing_sorted_SAM = use_existing_sorted_SAM,
leave_SAM = leave_SAM,
TryRevComp = TryRevComp
),
alignment = list(
fastq_dir = fastq_dir_path,
R1 = R1,
R2 = R2,
reference = reference,
SAM_name_base = paste0(run, "_", reference),
SAM_location = SAM_dir_path
),
genes = genes_l,
samples_barcodes = samples_barcodes_l,
step2 = list(
minimal_MAPQ = minimal_MAPQ,
insert_len_min = insert_len_min,
insert_len_max = insert_len_max,
amplicon_size_tolerance = amplicon_size_tolerance,
UMInoSNPpattern = UMInoSNPpattern,
SNPnoUMIpattern = SNPnoUMIpattern,
T2_small = T2_small,
MINflankLength = MINflankLength
)
)
# Write yaml file
list.save(yaml_list, yaml_fo)
}
write_config_yaml(plates.bc.cst.cq)
source("parameters.R")
output_dir <- file.path(project_dir, "output")
dir.create(output_dir, showWarnings = FALSE)
config_dir <- file.path(project_dir, "config")
dir.create(config_dir, showWarnings = FALSE)
source("parameters.R")
output_dir <- file.path(project_dir, "output")
dir.create(output_dir, showWarnings = FALSE)
output_dir <- file.path(project_dir, "output")
dir.create(output_dir, showWarnings = FALSE)
config_dir <- file.path(project_dir, "config")
dir.create(config_dir, showWarnings = FALSE)
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(project_dir, barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
{
constructs_f <- file.path(project_dir, constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(output_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
{
cell_quals_f <- file.path(project_dir, cell_quals_path, cell_quals)
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
}
{
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(output_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
}
{
write_config_yaml(plates.bc.cst.cq)
}
roxygen2::roxygenise()
roxygen2::roxygenise()
write_config_yaml <- function(plates) {
source("parameters.R", local=TRUE)
# Data Preparation
## Prepare list of {construct_id: barcode}
samples_barcodes_l <- list()
for (plate_i in seq_along(plates)) {
day <- get_info_from_platename(names(plates)[plate_i], "day")
construct_temp <- traverse_outof_plate_wells(plates[[plate_i]], "construct")
construct.day_temp <- paste0(construct_temp, "_", day)
barcode_temp <- traverse_outof_plate_wells(plates[[plate_i]], "barcode")
temp_list <- as.list(setNames(barcode_temp, construct.day_temp))
samples_barcodes_l <- c(samples_barcodes_l, temp_list)
}
## Prepare file directory paths
s2_fo <- file.path(project_dir, s2_result_path, s2_result)
yaml_fo <- file.path(config_dir, paste0(run, ".yaml"))
scripts_dir_path <- file.path(project_dir, scripts_path)
fastq_dir_path <- file.path(project_dir, fastq_dir)
SAM_dir_path <- file.path(project_dir, SAM_location)
# Sasha's YAML format
yaml_list <- list(
version = version,
experiment = list(
UMI = UMI,
SNP = SNP
),
scripts = list(
location = scripts_dir_path,
UMI_script = UMI_script,
SNP_script = SNP_script,
s2 = s2_script
),
output = list(
result = s2_fo,
output_yaml = output_yaml
),
diagnostics = list(
DEBUG = DEBUG,
use_existing_sorted_SAM = use_existing_sorted_SAM,
leave_SAM = leave_SAM,
TryRevComp = TryRevComp
),
alignment = list(
fastq_dir = fastq_dir_path,
R1 = R1,
R2 = R2,
reference = reference,
SAM_name_base = paste0(run, "_", reference),
SAM_location = SAM_dir_path
),
genes = genes_l,
samples_barcodes = samples_barcodes_l,
step2 = list(
minimal_MAPQ = minimal_MAPQ,
insert_len_min = insert_len_min,
insert_len_max = insert_len_max,
amplicon_size_tolerance = amplicon_size_tolerance,
UMInoSNPpattern = UMInoSNPpattern,
SNPnoUMIpattern = SNPnoUMIpattern,
T2_small = T2_small,
MINflankLength = MINflankLength
)
)
# Write yaml file
list.save(yaml_list, yaml_fo)
}
roxygen2::roxygenise()
devtools::release()
knitr::opts_chunk$set(echo = TRUE)
## YAML Version
version <- 5.0
## Experiment Setup ~ Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
plate_ids <- paste0(pert_maps,"_",days,"_",replicates)
### Constructs/Perturbations
constructs_map_path <- "clean_data/constructs"
constructs_maps <- c("DBI31","DBI31","DBI31")
### Barcodes
barcode_maps_path <- "clean_data/barcodes"
barcode_maps <- c("P1a","P1", "P2") # P3, P4
### Cell Qualities
cell_quals_path <- "clean_data/cell_quals"
cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
## Secondary Parameters
UMI <- FALSE
SNP <- TRUE
well_alpha <- LETTERS[1:8]
well_numer <- c(1:12)
## step 2 output
s2_result_path <- "output"
s2_result <- "s2_output.txt"
## alignment
### the following applies to step 1:::
fastq_dir <- "clean_data/fastq"
R1 <- "R1_test.fastq"
R2 <- "R2_test.fastq"
reference <- "mm10"
### the following applies to step 1 + step 2:::
SAM_name_base <- "FUYANG_6-5_mm10"
SAM_location <- "output/sam"
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <- list(
NM_010954_Ncam2_MAE = list(
SNPFlank_left = "CATACAATT",
position = "chr16:81596071-81596364",
amplicon_size = 294
),
NM_194355_Spire1_MAE = list(
SNPFlank_left = "ACGGAGTGT",
position = "chr18:67490796-67491034",
amplicon_size = 239
)
)
version <- 5.0
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
## YAML Version
version <- 5.0
## Experiment Setup ~ Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
plate_ids <- paste0(pert_maps,"_",days,"_",replicates)
### Constructs/Perturbations
constructs_map_path <- "clean_data/constructs"
constructs_maps <- c("DBI31","DBI31","DBI31")
### Barcodes
barcode_maps_path <- "clean_data/barcodes"
barcode_maps <- c("P1a","P1", "P2") # P3, P4
### Cell Qualities
cell_quals_path <- "clean_data/cell_quals"
cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
## Secondary Parameters
UMI <- FALSE
SNP <- TRUE
well_alpha <- LETTERS[1:8]
well_numer <- c(1:12)
## step 2 output
s2_result_path <- "output"
s2_result <- "s2_output.txt"
## alignment
### the following applies to step 1:::
fastq_dir <- "clean_data/fastq"
R1 <- "R1_test.fastq"
R2 <- "R2_test.fastq"
reference <- "mm10"
### the following applies to step 1 + step 2:::
SAM_name_base <- "FUYANG_6-5_mm10"
SAM_location <- "output/sam"
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <- list(
NM_010954_Ncam2_MAE = list(
SNPFlank_left = "CATACAATT",
position = "chr16:81596071-81596364",
amplicon_size = 294
),
NM_194355_Spire1_MAE = list(
SNPFlank_left = "ACGGAGTGT",
position = "chr18:67490796-67491034",
amplicon_size = 239
)
)
## Barcode Generation <-- To be implemented
## Scripts
scripts_path <- "scripts/perl"
UMI_script <- "ast_umi_v41.pl"
SNP_script <- "ast_snpv62X.pl"
s2_script <- "step2v52X.pl"
#~ asymagic: as2.pl
## Diagnostics
DEBUG <- TRUE
use_existing_sorted_SAM <- FALSE
leave_SAM <- FALSE
TryRevComp <- FALSE
output_yaml <- FALSE
## Step 2
minimal_MAPQ <- 12
### global limits on insert length  (for sanity)
insert_len_min <- 25
insert_len_max <- 700
### amplicon_size +/- this is allowed:
amplicon_size_tolerance <- 100
#~ umiPattern <- "A11 A*"
UMInoSNPpattern <- "A7 A6 A18 A11 A*"
SNPnoUMIpattern <- "A7 A6 A18 A*"
#~ ignore_T2_small <- "CGTGGAATCGCT"
#~ T2_small <- "TCGCTAAAACG"
T2_small <- "TCGCTAATTGC"
MINflankLength <- 6
plate_ids
knitr::opts_chunk$set(echo = TRUE)
## YAML Version
version <- 5.0
### Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
knitr::opts_chunk$set(echo = TRUE)
## YAML Version
version <- 5.0
### Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
pools <- c(1:7)
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
### Constructs/Perturbations
constructs_map_path <- "constructs"
constructs_maps <- c("DBI31","DBI31","DBI31")
### Barcodes
barcode_maps_path <- "barcodes"
barcode_maps <- c("P1a","P1", "P2") # P3, P4
### Cell Qualities
cell_quals_path <- "cell_viabilities"
cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
plate_ids <- paste0(constructs_maps,"_",days,"_",replicates)
plate_ids
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
project_run_name <- "HONDA"
pools <- c(1:7)
?get_constructs
??get_constructs
source("R/parameters.R")

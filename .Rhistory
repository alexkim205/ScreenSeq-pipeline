insert_len_min <- 25
insert_len_max <- 700
### amplicon_size +/- this is allowed:
amplicon_size_tolerance <- 100
#~ umiPattern <- "A11 A*"
UMInoSNPpattern <- "A7 A6 A18 A11 A*"
SNPnoUMIpattern <- "A7 A6 A18 A*"
#~ ignore_T2_small <- "CGTGGAATCGCT"
#~ T2_small <- "TCGCTAAAACG"
T2_small <- "TCGCTAATTGC"
MINflankLength <- 6
plate_ids
knitr::opts_chunk$set(echo = TRUE)
## YAML Version
version <- 5.0
### Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
knitr::opts_chunk$set(echo = TRUE)
## YAML Version
version <- 5.0
### Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
pools <- c(1:7)
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
### Constructs/Perturbations
constructs_map_path <- "constructs"
constructs_maps <- c("DBI31","DBI31","DBI31")
### Barcodes
barcode_maps_path <- "barcodes"
barcode_maps <- c("P1a","P1", "P2") # P3, P4
### Cell Qualities
cell_quals_path <- "cell_viabilities"
cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
plate_ids <- paste0(constructs_maps,"_",days,"_",replicates)
plate_ids
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
project_run_name <- "HONDA"
pools <- c(1:7)
?get_constructs
??get_constructs
source("R/parameters.R")
install.packages("rlist")
install.packages("writexl")
install.packages("readxl")
source("parameters.R")
source("R/parameters.R")
make_project(project_dir, run, pools, overwrite = TRUE)
output_dir <- file.path(project_dir, "output")
config_dir <- file.path(project_dir, "config")
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(project_dir, barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
source("R/functions.R")
make_project(project_dir, run, pools, overwrite = TRUE)
output_dir <- file.path(project_dir, "output")
config_dir <- file.path(project_dir, "config")
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(project_dir, barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
{
constructs_f <- file.path(project_dir, constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(output_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
{
cell_quals_f <- file.path(project_dir, cell_quals_path, cell_quals)
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
}
{
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(output_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
}
{
write_config_yaml(plates.bc.cst.cq)
}
install.packages("yaml")
install.packages("yaml")
getwd()
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
## Read in parameters into global namespace
read_parameters(yaml_f)
source("R/parameters.R")
source("R/functions.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
## Read in parameters into global namespace
read_parameters(yaml_f)
run
basename(yaml)f
basename(yaml_f)
file_path_sans_ext("ABCD.csv")
tools::file_path_sans_ext(yaml_f)
tools::file_path_sans_ext(basename(yaml_f))
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
plate_name
yaml_data <- read_yaml(yaml_f)
# TODOO NOT DONE
project_dir <- file.path(output_dir, plate_name)
output_dir <- output_path
output_path <<- yaml_data$output_path
output_dir <- output_path
output_dir
source("R/parameters.R")
source("R/functions.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
output_dir <- output_path
output_dir
# project_dir is plate directory
project_dir <- file.path(output_dir, plate_name)
dir.create(project_dir, showWarnings = FALSE)
project_dir
source("R/parameters.R")
source("R/functions.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
output_dir <- output_path
output_dir
# project_dir is plate directory
project_dir <- file.path(output_dir, plate_name)
dir.create(project_dir, showWarnings = FALSE)
mkdir <- function(path, path_in_path) {
temp_dir <- file.path(path, path_in_path)
dir.create(temp_dir, showWarnings = FALSE)
return(temp_dir)
}
#'     }
#'   }
#' }
#'
#'
#' @param output_dir A file path of where the plate folder will be created
#' @param plate_name A string of the plate name
#' @param overwrite A boolean that if true will overwrite any existing project
#'   directory specified at \code{project_dir}
#' @return The project_run_dir path
make_project <- function(output_dir, plate_name, overwrite = TRUE) {
# project_dir is plate directory
project_dir <- mkdir(output_dir, plate_name)
{
cell_viabilities_dir <- mkdir(output_dir, "cell_viability")
config_dir <- mkdir(output_dir, "config")
logs_dir <- mkdir(output_dir, "log")
outputs_dir <- mkdir(output_dir, "output")
{
# where s1 alignments go
sams_dir <- mkdir(outputs_dir, "sam")
}
# copy in scripts from helper scripts folder
src_dir <- mkdir(output_dir, "src")
{
perl_dir <- mkdir(src_dir, "perl")
sh_dir <- mkdir(src_dir, "sh")
}
}
return(project_dir)
}
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
project_dir
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
barcode_maps_path
source("R/parameters.R")
barcode_maps_path
source("R/functions.R")
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
barcode_maps_f
barcode_maps_path
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
barcode_maps_f
plates.bc <- create_plates(plate_ids, barcode_maps_f)
plates.bc
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
output_path
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
### Globally defines project_dir, outputs_dir
make_project(output_path, plate_name, overwrite = TRUE)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
constructs_f <- file.path(constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_f
constructs_fo <- file.path(outputs_dir, paste0(constructs_maps, "_w_ids.xlsx"))
constructs_fo
outputs_dir
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
plates.bc.cst
cell_quals_f <- file.path(cell_quals_path, cell_quals)
cell_quals <- paste0(time_stamp, "_", plate_ids, "_cellqual.xlsx")
cell_quals
source("R/parameters.R")
source("R/functions.R")
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
### Globally defines project_dir, outputs_dir
make_project(output_path, plate_name, overwrite = TRUE)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
## Get Construct/Perturbation ID's
{
constructs_f <- file.path(constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(outputs_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
cell_quals_f <- file.path(cell_quals_path, cell_quals)
cell_quals_f
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
plates.bc.cst.cq
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(outputs_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
write_config_yaml(plates.bc.cst.cq)
source("R/parameters.R")
source("R/functions.R")
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
### Globally defines project_dir, outputs_dir
make_project(output_path, plate_name, overwrite = TRUE)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
## Get Construct/Perturbation ID's
{
constructs_f <- file.path(constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(outputs_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
### Get clean data from Shiny App
{
cell_quals_f <- file.path(cell_quals_path, cell_quals)
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
}
## Write well YAML
{
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(outputs_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
}
## Write config YAML
{
write_config_yaml(plates.bc.cst.cq)
}
source("R/parameters.R")
source("R/functions.R")
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
### Globally defines project_dir, outputs_dir
make_project(output_path, plate_name, overwrite = TRUE)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
## Get Construct/Perturbation ID's
{
constructs_f <- file.path(constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(outputs_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
## Get Cell Quality Data
### Get clean data from Shiny App
{
cell_quals_f <- file.path(cell_quals_path, cell_quals)
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
}
## Write well YAML
{
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(outputs_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
}
## Write config YAML
{
write_config_yaml(plates.bc.cst.cq)
}
.libPaths( c( .libPaths(), "~/userLibrary") )
.libPaths()
.libPaths()
elp(Startup)
help(Startup)
R_LIBS_USER
help(.libPaths)
.libPaths( c( .libPaths(), "~/userLibrary") )
help(.libPaths)
.libPaths()
#' Checks arguments
#'
#' \code{read_arguments} checks if the local library path and the plate yaml
#' file was supplied.
#'
#' @param args A vector of arguments passed in via Rscript
#' @return A list of the local library path and the plate yaml file.
read_arguments <- function(args) {
# manual <- "Usage: /path/to/main.R [R_LIBS_USER] [plate_yaml_file]"
#
# if (length(args)==0) {
#   stop(manual, call.=FALSE)
# } else if (length(args)==1) {
#   # default output file
#   stop(manual, call.=FALSE)
# } else if (length(args)==2) {
#   # R local lib, plate yaml file
#   return(list(args[1], args[2]))
# }
if (length(args)==0) {
stop(manual, call.=FALSE)
} else if (length(args)==1) {
# default output file
return(args[1])
}
}
getwd()
list.of.packages <- c("yaml","rlist","readxl","writexl","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
library(stringi, lib.loc = NULL)
read_parameters <- function(yaml_f) {
yaml_data <- read_yaml(yaml_f)
##########################
# Identifying Parameters #
##########################
## id
run <<- yaml_data$id$run
time_stamp <<- yaml_data$id$timestamp
#pools <- c(1:7)
days <<- yaml_data$id$day
replicates <<- yaml_data$id$replicate
## experiment
UMI <<- yaml_data$experiment$UMI
SNP <<- yaml_data$experiment$SNP
well_alpha <<- LETTERS[1:yaml_data$experiment$well_alpha]
well_numer <<- c(1:yaml_data$experiment$well_numer)
## data
### Constructs/Perturbations
constructs_map_path <<- yaml_data$data$perturbation$path
constructs_maps <<- yaml_data$data$perturbation$map_basename
### Barcodes
barcode_maps_path <<- yaml_data$data$barcode_map$path
barcode_maps <<- yaml_data$data$barcode_map$map_basename
### Plate identifiers ~ Don't edit
plate_ids <<- paste0(constructs_maps,"_",days,"_",replicates)
### Cell Qualities
cell_quals_path <<- yaml_data$data$cell_viabilities$path
cell_quals <<- paste0(time_stamp, "_", plate_ids, "_cellqual.xlsx")
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <<- yaml_data$data$genes
########################
# Secondary Parameters #
########################
## YAML Version
yaml_version <<- yaml_data$version
output_path <<- yaml_data$output_path
## S1 - alignment
doS1 <<- yaml_data$S1$doS1
SAM_location <<- yaml_data$S1$SAM$path
SAM_name_base <<- yaml_data$S1$SAM$basename
fastq_dir <<- yaml_data$S1$FASTQ$path
R1 <<- yaml_data$S1$FASTQ$R1
R2 <<- yaml_data$S1$FASTQ$R2
reference <<- yaml_data$S1$FASTQ$reference
## S2 - count
doS2 <<- yaml_data$S2$doS2
### step 2 output
s2_result_path <<- yaml_data$S2$count_output$path
s2_result <<- yaml_data$S2$count_output$result
minimal_MAPQ <<- yaml_data$S2$minimal_MAPQ
### global limits on insert length  (for sanity)
insert_len_min <<- yaml_data$S2$insert_len_min
insert_len_max <<- yaml_data$S2$insert_len_max
### amplicon_size +/- this is allowed:
amplicon_size_tolerance <<- yaml_data$S2$amplicon_size_tolerance
#~ umiPattern <- "A11 A*"
UMInoSNPpattern <<- yaml_data$S2$UMInoSNPpattern
SNPnoUMIpattern <<- yaml_data$S2$SNPnoUMIpattern
#~ ignore_T2_small <<- "CGTGGAATCGCT"
#~ T2_small <- "TCGCTAAAACG"
T2_small <<- yaml_data$S2$T2_small
MINflankLength <<- yaml_data$S2$MINflankLength
## Diagnostics
DEBUG <<- yaml_data$diagnostics$DEBUG
use_existing_sorted_SAM <<- yaml_data$diagnostics$use_existing_sorted_SAM
leave_SAM <<- yaml_data$diagnostics$leave_SAM
TryRevComp <<- yaml_data$diagnostics$TryRevComp
output_yaml <<- yaml_data$diagnostics$output_yaml
}
s <- "yaml"
library(s)
library(eval(s))
eval(s)
library(eval(parse(s)))
library(eval(parse(text=s)))
eval(parse(text=s))
library(eval(parse(text=s))[1])
library(eval(parse(text=s)))
library(s, , character.only=TRUE)
library(s, character.only=TRUE)

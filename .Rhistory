## step 2 output
s2_result_path <- "output"
s2_result <- "s2_output.txt"
## alignment
### the following applies to step 1:::
fastq_dir <- "clean_data/fastq"
R1 <- "R1_test.fastq"
R2 <- "R2_test.fastq"
reference <- "mm10"
### the following applies to step 1 + step 2:::
SAM_name_base <- "FUYANG_6-5_mm10"
SAM_location <- "output/sam"
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <- list(
NM_010954_Ncam2_MAE = list(
SNPFlank_left = "CATACAATT",
position = "chr16:81596071-81596364",
amplicon_size = 294
),
NM_194355_Spire1_MAE = list(
SNPFlank_left = "ACGGAGTGT",
position = "chr18:67490796-67491034",
amplicon_size = 239
)
)
version <- 5.0
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
## YAML Version
version <- 5.0
## Experiment Setup ~ Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
plate_ids <- paste0(pert_maps,"_",days,"_",replicates)
### Constructs/Perturbations
constructs_map_path <- "clean_data/constructs"
constructs_maps <- c("DBI31","DBI31","DBI31")
### Barcodes
barcode_maps_path <- "clean_data/barcodes"
barcode_maps <- c("P1a","P1", "P2") # P3, P4
### Cell Qualities
cell_quals_path <- "clean_data/cell_quals"
cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
## Secondary Parameters
UMI <- FALSE
SNP <- TRUE
well_alpha <- LETTERS[1:8]
well_numer <- c(1:12)
## step 2 output
s2_result_path <- "output"
s2_result <- "s2_output.txt"
## alignment
### the following applies to step 1:::
fastq_dir <- "clean_data/fastq"
R1 <- "R1_test.fastq"
R2 <- "R2_test.fastq"
reference <- "mm10"
### the following applies to step 1 + step 2:::
SAM_name_base <- "FUYANG_6-5_mm10"
SAM_location <- "output/sam"
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <- list(
NM_010954_Ncam2_MAE = list(
SNPFlank_left = "CATACAATT",
position = "chr16:81596071-81596364",
amplicon_size = 294
),
NM_194355_Spire1_MAE = list(
SNPFlank_left = "ACGGAGTGT",
position = "chr18:67490796-67491034",
amplicon_size = 239
)
)
## Barcode Generation <-- To be implemented
## Scripts
scripts_path <- "scripts/perl"
UMI_script <- "ast_umi_v41.pl"
SNP_script <- "ast_snpv62X.pl"
s2_script <- "step2v52X.pl"
#~ asymagic: as2.pl
## Diagnostics
DEBUG <- TRUE
use_existing_sorted_SAM <- FALSE
leave_SAM <- FALSE
TryRevComp <- FALSE
output_yaml <- FALSE
## Step 2
minimal_MAPQ <- 12
### global limits on insert length  (for sanity)
insert_len_min <- 25
insert_len_max <- 700
### amplicon_size +/- this is allowed:
amplicon_size_tolerance <- 100
#~ umiPattern <- "A11 A*"
UMInoSNPpattern <- "A7 A6 A18 A11 A*"
SNPnoUMIpattern <- "A7 A6 A18 A*"
#~ ignore_T2_small <- "CGTGGAATCGCT"
#~ T2_small <- "TCGCTAAAACG"
T2_small <- "TCGCTAATTGC"
MINflankLength <- 6
plate_ids
knitr::opts_chunk$set(echo = TRUE)
## YAML Version
version <- 5.0
### Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
knitr::opts_chunk$set(echo = TRUE)
## YAML Version
version <- 5.0
### Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
pools <- c(1:7)
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
### Constructs/Perturbations
constructs_map_path <- "constructs"
constructs_maps <- c("DBI31","DBI31","DBI31")
### Barcodes
barcode_maps_path <- "barcodes"
barcode_maps <- c("P1a","P1", "P2") # P3, P4
### Cell Qualities
cell_quals_path <- "cell_viabilities"
cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
plate_ids <- paste0(constructs_maps,"_",days,"_",replicates)
plate_ids
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
project_run_name <- "HONDA"
pools <- c(1:7)
?get_constructs
??get_constructs
source("R/parameters.R")
install.packages("rlist")
install.packages("writexl")
install.packages("readxl")
source("parameters.R")
source("R/parameters.R")
make_project(project_dir, run, pools, overwrite = TRUE)
output_dir <- file.path(project_dir, "output")
config_dir <- file.path(project_dir, "config")
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(project_dir, barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
source("R/functions.R")
make_project(project_dir, run, pools, overwrite = TRUE)
output_dir <- file.path(project_dir, "output")
config_dir <- file.path(project_dir, "config")
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(project_dir, barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
{
constructs_f <- file.path(project_dir, constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(output_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
{
cell_quals_f <- file.path(project_dir, cell_quals_path, cell_quals)
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
}
{
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(output_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
}
{
write_config_yaml(plates.bc.cst.cq)
}
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
library(yaml)
yaml_f <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project/config/plate1.yaml"
yaml.load_file(yaml_f)
yaml_f <- /Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/config
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/config"
yaml.load_file(yaml_f)
read_yaml(yaml_f, "r")
read_yaml(yaml_f)
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/config/plate1.yaml"
yaml.load_file(yaml_f)
read_yaml(yaml_f)
read_yaml(yaml_f)
yaml.load_file(yaml_f)
read_yaml(yaml_f, "r")
read_yaml(yaml_f, "rt")
read_yaml(yaml_f)
?read_yaml
yaml.read_yaml(yaml_f)
read_yaml(yaml_f)
data <- read_yaml(yaml_f)
data <- read_yaml(yaml_f)
data
yaml_data <- read_yaml(yaml_f)
yaml_data
yaml_data$id$run
yaml_data$experiment$well_numer
read_parameters <- function(yaml_f) {
yaml_data <- read_yaml(yaml_f)
##########################
# Identifying Parameters #
##########################
## id
run <<- yaml_data$id$run
timestamp <<- yaml_data$id$timestamp
#pools <- c(1:7)
days <<- yaml_data$id$day
replicates <<- yaml_data$id$replicate
## experiment
UMI <<- yaml_data$experiment$UMI
SNP <<- yaml_data$experiment$SNP
well_alpha <<- LETTERS[1:yaml_data$experiment$well_alpha]
well_numer <<- c(1:yaml_data$experiment$well_numer)
## data
### Constructs/Perturbations
constructs_map_path <<- yaml_data$data$perturbation$path
constructs_maps <<- yaml_data$data$perturbation$map_basename
### Barcodes
barcode_maps_path <<- yaml_data$data$barcode_map$path
barcode_maps <<- yaml_data$data$barcode_map$map_basename
### Plate identifiers ~ Don't edit
plate_ids <<- paste0(constructs_maps,"_",days,"_",replicates)
### Cell Qualities
cell_quals_path <<- yaml_data$data$cell_quality$path
# cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <<- yaml_data$data$genes
########################
# Secondary Parameters #
########################
## YAML Version
version <<- yaml_data$version
project_dir <<- yaml_data$output_path
## S1 - alignment
doS1 <<- yaml_data$S1$doS1
SAM_location <<- yaml_data$S1$SAM$path
SAM_name_base <<- yaml_data$S1$SAM$basename
fastq_dir <<- yaml_data$S1$FASTQ$path
R1 <<- yaml_data$S1$FASTQ$R1
R2 <<- yaml_data$S1$FASTQ$R2
reference <<- yaml_data$S1$FASTQ$reference
## S2 - count
doS2 <<- yaml_data$S2$doS2
### step 2 output
s2_result_path <<- yaml_data$S2$count_output$path
s2_result <<- yaml_data$S2$count_output$result
minimal_MAPQ <<- yaml_data$S2$minimal_MAPQ
### global limits on insert length  (for sanity)
insert_len_min <<- yaml_data$S2$insert_len_min
insert_len_max <<- yaml_data$S2$insert_len_max
### amplicon_size +/- this is allowed:
amplicon_size_tolerance <<- yaml_data$S2$amplicon_size_tolerance
#~ umiPattern <- "A11 A*"
UMInoSNPpattern <<- yaml_data$S2$UMInoSNPpattern
SNPnoUMIpattern <<- yaml_data$S2$SNPnoUMIpattern
#~ ignore_T2_small <<- "CGTGGAATCGCT"
#~ T2_small <- "TCGCTAAAACG"
T2_small <<- yaml_data$S2$T2_small
MINflankLength <<- yaml_data$S2$MINflankLength
## Diagnostics
DEBUG <<- yaml_data$diagnostics$DEBUG
use_existing_sorted_SAM <<- yaml_data$diagnostics$use_existing_sorted_SAM
leave_SAM <<- yaml_data$diagnostics$leave_SAM
TryRevComp <<- yaml_data$diagnostics$TryRevComp
output_yaml <<- yaml_data$diagnostics$output_yaml
}
output_yaml
read_parameters(yaml_f)
yaml_data$id$timestamp
read_parameters(yaml_f)
read_parameters <- function(yaml_f) {
yaml_data <- read_yaml(yaml_f)
##########################
# Identifying Parameters #
##########################
## id
run <<- yaml_data$id$run
timestamp <<- yaml_data$id$timestamp
#pools <- c(1:7)
days <<- yaml_data$id$day
replicates <<- yaml_data$id$replicate
## experiment
UMI <<- yaml_data$experiment$UMI
SNP <<- yaml_data$experiment$SNP
well_alpha <<- LETTERS[1:yaml_data$experiment$well_alpha]
well_numer <<- c(1:yaml_data$experiment$well_numer)
## data
### Constructs/Perturbations
constructs_map_path <<- yaml_data$data$perturbation$path
constructs_maps <<- yaml_data$data$perturbation$map_basename
### Barcodes
barcode_maps_path <<- yaml_data$data$barcode_map$path
barcode_maps <<- yaml_data$data$barcode_map$map_basename
### Plate identifiers ~ Don't edit
plate_ids <<- paste0(constructs_maps,"_",days,"_",replicates)
### Cell Qualities
cell_quals_path <<- yaml_data$data$cell_quality$path
# cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <<- yaml_data$data$genes
########################
# Secondary Parameters #
########################
## YAML Version
version <<- yaml_data$version
project_dir <<- yaml_data$output_path
## S1 - alignment
doS1 <<- yaml_data$S1$doS1
SAM_location <<- yaml_data$S1$SAM$path
SAM_name_base <<- yaml_data$S1$SAM$basename
fastq_dir <<- yaml_data$S1$FASTQ$path
R1 <<- yaml_data$S1$FASTQ$R1
R2 <<- yaml_data$S1$FASTQ$R2
reference <<- yaml_data$S1$FASTQ$reference
## S2 - count
doS2 <<- yaml_data$S2$doS2
### step 2 output
s2_result_path <<- yaml_data$S2$count_output$path
s2_result <<- yaml_data$S2$count_output$result
minimal_MAPQ <<- yaml_data$S2$minimal_MAPQ
### global limits on insert length  (for sanity)
insert_len_min <<- yaml_data$S2$insert_len_min
insert_len_max <<- yaml_data$S2$insert_len_max
### amplicon_size +/- this is allowed:
amplicon_size_tolerance <<- yaml_data$S2$amplicon_size_tolerance
#~ umiPattern <- "A11 A*"
UMInoSNPpattern <<- yaml_data$S2$UMInoSNPpattern
SNPnoUMIpattern <<- yaml_data$S2$SNPnoUMIpattern
#~ ignore_T2_small <<- "CGTGGAATCGCT"
#~ T2_small <- "TCGCTAAAACG"
T2_small <<- yaml_data$S2$T2_small
MINflankLength <<- yaml_data$S2$MINflankLength
## Diagnostics
DEBUG <<- yaml_data$diagnostics$DEBUG
use_existing_sorted_SAM <<- yaml_data$diagnostics$use_existing_sorted_SAM
leave_SAM <<- yaml_data$diagnostics$leave_SAM
TryRevComp <<- yaml_data$diagnostics$TryRevComp
output_yaml <<- yaml_data$diagnostics$output_yaml
}
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/config/plate1.yaml"
read_parameters(yaml_f)
timestamp
read_parameters(yaml_f)
read_parameters <- function(yaml_f) {
yaml_data <- read_yaml(yaml_f)
##########################
# Identifying Parameters #
##########################
## id
run <<- yaml_data$id$run
time_stamp <<- yaml_data$id$timestamp
#pools <- c(1:7)
days <<- yaml_data$id$day
replicates <<- yaml_data$id$replicate
## experiment
UMI <<- yaml_data$experiment$UMI
SNP <<- yaml_data$experiment$SNP
well_alpha <<- LETTERS[1:yaml_data$experiment$well_alpha]
well_numer <<- c(1:yaml_data$experiment$well_numer)
## data
### Constructs/Perturbations
constructs_map_path <<- yaml_data$data$perturbation$path
constructs_maps <<- yaml_data$data$perturbation$map_basename
### Barcodes
barcode_maps_path <<- yaml_data$data$barcode_map$path
barcode_maps <<- yaml_data$data$barcode_map$map_basename
### Plate identifiers ~ Don't edit
plate_ids <<- paste0(constructs_maps,"_",days,"_",replicates)
### Cell Qualities
cell_quals_path <<- yaml_data$data$cell_quality$path
# cell_quals <- paste0(time_stamp, "_", plate_ids, "_cellqual.xlsx")
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <<- yaml_data$data$genes
########################
# Secondary Parameters #
########################
## YAML Version
version <<- yaml_data$version
project_dir <<- yaml_data$output_path
## S1 - alignment
doS1 <<- yaml_data$S1$doS1
SAM_location <<- yaml_data$S1$SAM$path
SAM_name_base <<- yaml_data$S1$SAM$basename
fastq_dir <<- yaml_data$S1$FASTQ$path
R1 <<- yaml_data$S1$FASTQ$R1
R2 <<- yaml_data$S1$FASTQ$R2
reference <<- yaml_data$S1$FASTQ$reference
## S2 - count
doS2 <<- yaml_data$S2$doS2
### step 2 output
s2_result_path <<- yaml_data$S2$count_output$path
s2_result <<- yaml_data$S2$count_output$result
minimal_MAPQ <<- yaml_data$S2$minimal_MAPQ
### global limits on insert length  (for sanity)
insert_len_min <<- yaml_data$S2$insert_len_min
insert_len_max <<- yaml_data$S2$insert_len_max
### amplicon_size +/- this is allowed:
amplicon_size_tolerance <<- yaml_data$S2$amplicon_size_tolerance
#~ umiPattern <- "A11 A*"
UMInoSNPpattern <<- yaml_data$S2$UMInoSNPpattern
SNPnoUMIpattern <<- yaml_data$S2$SNPnoUMIpattern
#~ ignore_T2_small <<- "CGTGGAATCGCT"
#~ T2_small <- "TCGCTAAAACG"
T2_small <<- yaml_data$S2$T2_small
MINflankLength <<- yaml_data$S2$MINflankLength
## Diagnostics
DEBUG <<- yaml_data$diagnostics$DEBUG
use_existing_sorted_SAM <<- yaml_data$diagnostics$use_existing_sorted_SAM
leave_SAM <<- yaml_data$diagnostics$leave_SAM
TryRevComp <<- yaml_data$diagnostics$TryRevComp
output_yaml <<- yaml_data$diagnostics$output_yaml
}
read_parameters(yaml_f)
version
read_parameters(yaml_f)
read_parameters <- function(yaml_f) {
yaml_data <- read_yaml(yaml_f)
##########################
# Identifying Parameters #
##########################
## id
run <<- yaml_data$id$run
time_stamp <<- yaml_data$id$timestamp
#pools <- c(1:7)
days <<- yaml_data$id$day
replicates <<- yaml_data$id$replicate
## experiment
UMI <<- yaml_data$experiment$UMI
SNP <<- yaml_data$experiment$SNP
well_alpha <<- LETTERS[1:yaml_data$experiment$well_alpha]
well_numer <<- c(1:yaml_data$experiment$well_numer)
## data
### Constructs/Perturbations
constructs_map_path <<- yaml_data$data$perturbation$path
constructs_maps <<- yaml_data$data$perturbation$map_basename
### Barcodes
barcode_maps_path <<- yaml_data$data$barcode_map$path
barcode_maps <<- yaml_data$data$barcode_map$map_basename
### Plate identifiers ~ Don't edit
plate_ids <<- paste0(constructs_maps,"_",days,"_",replicates)
### Cell Qualities
cell_quals_path <<- yaml_data$data$cell_quality$path
# cell_quals <- paste0(time_stamp, "_", plate_ids, "_cellqual.xlsx")
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <<- yaml_data$data$genes
########################
# Secondary Parameters #
########################
## YAML Version
yaml_version <<- yaml_data$version
project_dir <<- yaml_data$output_path
## S1 - alignment
doS1 <<- yaml_data$S1$doS1
SAM_location <<- yaml_data$S1$SAM$path
SAM_name_base <<- yaml_data$S1$SAM$basename
fastq_dir <<- yaml_data$S1$FASTQ$path
R1 <<- yaml_data$S1$FASTQ$R1
R2 <<- yaml_data$S1$FASTQ$R2
reference <<- yaml_data$S1$FASTQ$reference
## S2 - count
doS2 <<- yaml_data$S2$doS2
### step 2 output
s2_result_path <<- yaml_data$S2$count_output$path
s2_result <<- yaml_data$S2$count_output$result
minimal_MAPQ <<- yaml_data$S2$minimal_MAPQ
### global limits on insert length  (for sanity)
insert_len_min <<- yaml_data$S2$insert_len_min
insert_len_max <<- yaml_data$S2$insert_len_max
### amplicon_size +/- this is allowed:
amplicon_size_tolerance <<- yaml_data$S2$amplicon_size_tolerance
#~ umiPattern <- "A11 A*"
UMInoSNPpattern <<- yaml_data$S2$UMInoSNPpattern
SNPnoUMIpattern <<- yaml_data$S2$SNPnoUMIpattern
#~ ignore_T2_small <<- "CGTGGAATCGCT"
#~ T2_small <- "TCGCTAAAACG"
T2_small <<- yaml_data$S2$T2_small
MINflankLength <<- yaml_data$S2$MINflankLength
## Diagnostics
DEBUG <<- yaml_data$diagnostics$DEBUG
use_existing_sorted_SAM <<- yaml_data$diagnostics$use_existing_sorted_SAM
leave_SAM <<- yaml_data$diagnostics$leave_SAM
TryRevComp <<- yaml_data$diagnostics$TryRevComp
output_yaml <<- yaml_data$diagnostics$output_yaml
}
read_parameters(yaml_f)

timestamp <- c("20171016", "20171023", "20171023")
plate_ids <- paste0(pert_maps,"_",days,"_",replicates)
### Constructs/Perturbations
constructs_map_path <- "clean_data/constructs"
constructs_maps <- c("DBI31","DBI31","DBI31")
### Barcodes
barcode_maps_path <- "clean_data/barcodes"
barcode_maps <- c("P1a","P1", "P2") # P3, P4
### Cell Qualities
cell_quals_path <- "clean_data/cell_quals"
cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
## Secondary Parameters
UMI <- FALSE
SNP <- TRUE
well_alpha <- LETTERS[1:8]
well_numer <- c(1:12)
## step 2 output
s2_result_path <- "output"
s2_result <- "s2_output.txt"
## alignment
### the following applies to step 1:::
fastq_dir <- "clean_data/fastq"
R1 <- "R1_test.fastq"
R2 <- "R2_test.fastq"
reference <- "mm10"
### the following applies to step 1 + step 2:::
SAM_name_base <- "FUYANG_6-5_mm10"
SAM_location <- "output/sam"
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <- list(
NM_010954_Ncam2_MAE = list(
SNPFlank_left = "CATACAATT",
position = "chr16:81596071-81596364",
amplicon_size = 294
),
NM_194355_Spire1_MAE = list(
SNPFlank_left = "ACGGAGTGT",
position = "chr18:67490796-67491034",
amplicon_size = 239
)
)
version <- 5.0
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
## YAML Version
version <- 5.0
## Experiment Setup ~ Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
plate_ids <- paste0(pert_maps,"_",days,"_",replicates)
### Constructs/Perturbations
constructs_map_path <- "clean_data/constructs"
constructs_maps <- c("DBI31","DBI31","DBI31")
### Barcodes
barcode_maps_path <- "clean_data/barcodes"
barcode_maps <- c("P1a","P1", "P2") # P3, P4
### Cell Qualities
cell_quals_path <- "clean_data/cell_quals"
cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
## Secondary Parameters
UMI <- FALSE
SNP <- TRUE
well_alpha <- LETTERS[1:8]
well_numer <- c(1:12)
## step 2 output
s2_result_path <- "output"
s2_result <- "s2_output.txt"
## alignment
### the following applies to step 1:::
fastq_dir <- "clean_data/fastq"
R1 <- "R1_test.fastq"
R2 <- "R2_test.fastq"
reference <- "mm10"
### the following applies to step 1 + step 2:::
SAM_name_base <- "FUYANG_6-5_mm10"
SAM_location <- "output/sam"
## genes
### temporary solution until I figure out where these genes are coming from
genes_l <- list(
NM_010954_Ncam2_MAE = list(
SNPFlank_left = "CATACAATT",
position = "chr16:81596071-81596364",
amplicon_size = 294
),
NM_194355_Spire1_MAE = list(
SNPFlank_left = "ACGGAGTGT",
position = "chr18:67490796-67491034",
amplicon_size = 239
)
)
## Barcode Generation <-- To be implemented
## Scripts
scripts_path <- "scripts/perl"
UMI_script <- "ast_umi_v41.pl"
SNP_script <- "ast_snpv62X.pl"
s2_script <- "step2v52X.pl"
#~ asymagic: as2.pl
## Diagnostics
DEBUG <- TRUE
use_existing_sorted_SAM <- FALSE
leave_SAM <- FALSE
TryRevComp <- FALSE
output_yaml <- FALSE
## Step 2
minimal_MAPQ <- 12
### global limits on insert length  (for sanity)
insert_len_min <- 25
insert_len_max <- 700
### amplicon_size +/- this is allowed:
amplicon_size_tolerance <- 100
#~ umiPattern <- "A11 A*"
UMInoSNPpattern <- "A7 A6 A18 A11 A*"
SNPnoUMIpattern <- "A7 A6 A18 A*"
#~ ignore_T2_small <- "CGTGGAATCGCT"
#~ T2_small <- "TCGCTAAAACG"
T2_small <- "TCGCTAATTGC"
MINflankLength <- 6
plate_ids
knitr::opts_chunk$set(echo = TRUE)
## YAML Version
version <- 5.0
### Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
knitr::opts_chunk$set(echo = TRUE)
## YAML Version
version <- 5.0
### Primary Parameters
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
run <- "FUYANG"
pools <- c(1:7)
days <- c("D12", "D19", "D19")
replicates <- c("R3", "R2", "R3")
timestamp <- c("20171016", "20171023", "20171023")
### Constructs/Perturbations
constructs_map_path <- "constructs"
constructs_maps <- c("DBI31","DBI31","DBI31")
### Barcodes
barcode_maps_path <- "barcodes"
barcode_maps <- c("P1a","P1", "P2") # P3, P4
### Cell Qualities
cell_quals_path <- "cell_viabilities"
cell_quals <- paste0(timestamp, "_", plate_ids, "_cellqual.xlsx")
plate_ids <- paste0(constructs_maps,"_",days,"_",replicates)
plate_ids
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
project_dir <- "/Users/alexkim/Desktop/Gimelbrant/datamunge_test_project"
project_run_name <- "HONDA"
pools <- c(1:7)
?get_constructs
??get_constructs
source("R/parameters.R")
install.packages("rlist")
install.packages("writexl")
install.packages("readxl")
source("parameters.R")
source("R/parameters.R")
make_project(project_dir, run, pools, overwrite = TRUE)
output_dir <- file.path(project_dir, "output")
config_dir <- file.path(project_dir, "config")
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(project_dir, barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
source("R/functions.R")
make_project(project_dir, run, pools, overwrite = TRUE)
output_dir <- file.path(project_dir, "output")
config_dir <- file.path(project_dir, "config")
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(project_dir, barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
{
constructs_f <- file.path(project_dir, constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(output_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
{
cell_quals_f <- file.path(project_dir, cell_quals_path, cell_quals)
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
}
{
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(output_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
}
{
write_config_yaml(plates.bc.cst.cq)
}
install.packages("yaml")
install.packages("yaml")
getwd()
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
## Read in parameters into global namespace
read_parameters(yaml_f)
source("R/parameters.R")
source("R/functions.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
## Read in parameters into global namespace
read_parameters(yaml_f)
run
basename(yaml)f
basename(yaml_f)
file_path_sans_ext("ABCD.csv")
tools::file_path_sans_ext(yaml_f)
tools::file_path_sans_ext(basename(yaml_f))
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
plate_name
yaml_data <- read_yaml(yaml_f)
# TODOO NOT DONE
project_dir <- file.path(output_dir, plate_name)
output_dir <- output_path
output_path <<- yaml_data$output_path
output_dir <- output_path
output_dir
source("R/parameters.R")
source("R/functions.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
output_dir <- output_path
output_dir
# project_dir is plate directory
project_dir <- file.path(output_dir, plate_name)
dir.create(project_dir, showWarnings = FALSE)
project_dir
source("R/parameters.R")
source("R/functions.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
output_dir <- output_path
output_dir
# project_dir is plate directory
project_dir <- file.path(output_dir, plate_name)
dir.create(project_dir, showWarnings = FALSE)
mkdir <- function(path, path_in_path) {
temp_dir <- file.path(path, path_in_path)
dir.create(temp_dir, showWarnings = FALSE)
return(temp_dir)
}
#'     }
#'   }
#' }
#'
#'
#' @param output_dir A file path of where the plate folder will be created
#' @param plate_name A string of the plate name
#' @param overwrite A boolean that if true will overwrite any existing project
#'   directory specified at \code{project_dir}
#' @return The project_run_dir path
make_project <- function(output_dir, plate_name, overwrite = TRUE) {
# project_dir is plate directory
project_dir <- mkdir(output_dir, plate_name)
{
cell_viabilities_dir <- mkdir(output_dir, "cell_viability")
config_dir <- mkdir(output_dir, "config")
logs_dir <- mkdir(output_dir, "log")
outputs_dir <- mkdir(output_dir, "output")
{
# where s1 alignments go
sams_dir <- mkdir(outputs_dir, "sam")
}
# copy in scripts from helper scripts folder
src_dir <- mkdir(output_dir, "src")
{
perl_dir <- mkdir(src_dir, "perl")
sh_dir <- mkdir(src_dir, "sh")
}
}
return(project_dir)
}
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
project_dir
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
barcode_maps_path
source("R/parameters.R")
barcode_maps_path
source("R/functions.R")
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
barcode_maps_f
barcode_maps_path
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
project_dir <<- make_project(output_path, plate_name, overwrite = TRUE)
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
barcode_maps_f
plates.bc <- create_plates(plate_ids, barcode_maps_f)
plates.bc
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
output_path
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
### Globally defines project_dir, outputs_dir
make_project(output_path, plate_name, overwrite = TRUE)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
constructs_f <- file.path(constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_f
constructs_fo <- file.path(outputs_dir, paste0(constructs_maps, "_w_ids.xlsx"))
constructs_fo
outputs_dir
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
plates.bc.cst
cell_quals_f <- file.path(cell_quals_path, cell_quals)
cell_quals <- paste0(time_stamp, "_", plate_ids, "_cellqual.xlsx")
cell_quals
source("R/parameters.R")
source("R/functions.R")
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
### Globally defines project_dir, outputs_dir
make_project(output_path, plate_name, overwrite = TRUE)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
## Get Construct/Perturbation ID's
{
constructs_f <- file.path(constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(outputs_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
cell_quals_f <- file.path(cell_quals_path, cell_quals)
cell_quals_f
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
plates.bc.cst.cq
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(outputs_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
write_config_yaml(plates.bc.cst.cq)
source("R/parameters.R")
source("R/functions.R")
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
### Globally defines project_dir, outputs_dir
make_project(output_path, plate_name, overwrite = TRUE)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
## Get Construct/Perturbation ID's
{
constructs_f <- file.path(constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(outputs_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
### Get clean data from Shiny App
{
cell_quals_f <- file.path(cell_quals_path, cell_quals)
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
}
## Write well YAML
{
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(outputs_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
}
## Write config YAML
{
write_config_yaml(plates.bc.cst.cq)
}
source("R/parameters.R")
source("R/functions.R")
source("R/make_project.R")
yaml_f <- "/Users/alexkim/Dropbox/Gimelbrant_Lab/datamunge_test_project/plate1.yaml"
plate_name <- tools::file_path_sans_ext(basename(yaml_f))
## Read in parameters into global namespace
read_parameters(yaml_f)
## Create project directory structure
### Globally defines project_dir, outputs_dir
make_project(output_path, plate_name, overwrite = TRUE)
## Get barcodes
{
### Create master plates list with barcodes
barcode_maps_f <- file.path(barcode_maps_path, paste0(barcode_maps, ".xlsx"))
plates.bc <- create_plates(plate_ids, barcode_maps_f)
}
## Get Construct/Perturbation ID's
{
constructs_f <- file.path(constructs_map_path, paste0(constructs_maps, ".xlsx"))
constructs_fo <- file.path(outputs_dir, paste0(constructs_maps, "_w_ids.xlsx"))
WRITE_CONSTRUCT_FILE <- TRUE
constructs_list <- get_constructs(plate_ids, constructs_f, constructs_fo, WRITE_CONSTRUCT_FILE) # Region
### Add construct id data to plates list
plates.bc.cst <- add_lists_to_plates(plates.bc, "construct", constructs_list)
}
## Get Cell Quality Data
### Get clean data from Shiny App
{
cell_quals_f <- file.path(cell_quals_path, cell_quals)
cell_quals_list <- get_cell_qualities(plate_ids, cell_quals_f)
### Add cell_quality data to plates list
plates.bc.cst.cq <- add_lists_to_plates(plates.bc.cst, "cell_quality", cell_quals_list)
}
## Write well YAML
{
WRITE_WELLS_FILE <- TRUE
WRITE_PRINTSHEET_HELPER <- TRUE
write_wells_info(outputs_dir, plates.bc.cst.cq, WRITE_WELLS_FILE, WRITE_PRINTSHEET_HELPER)
}
## Write config YAML
{
write_config_yaml(plates.bc.cst.cq)
}
.libPaths( c( .libPaths(), "~/userLibrary") )
.libPaths()
.libPaths()
elp(Startup)
help(Startup)
R_LIBS_USER
help(.libPaths)
.libPaths( c( .libPaths(), "~/userLibrary") )
help(.libPaths)
.libPaths()
